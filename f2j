function f2j() {
    # Processa contexto Laravel
    if [[ "$1" == "laravel" ]]; then
        local laravel_arquivos=(
            README.md .env config/
            app/Http/Controllers/ app/Models/ resources/views/
            routes/web.php routes/api.php database/migrations/
            database/seeders/ composer.json package.json
            webpack.mix.js public/ routes/ tests/
        )

        local arquivos=()

        # Processa cada caminho
        for caminho in "${laravel_arquivos[@]}"; do
            if [[ -d "$caminho" ]]; then
                while IFS= read -r -d $'\0' arquivo; do
                    arquivos+=("$arquivo")
                done < <(find "$caminho" -type f -print0 2>/dev/null)
            elif [[ -f "$caminho" ]]; then
                arquivos+=("$caminho")
            fi
        done

        # Executa processamento normal
        if (( ${#arquivos[@]} > 0 )); then
            f2j "${arquivos[@]}"  # Chama sem 'laravel' para evitar loop
        else
            echo "❌ Nenhum arquivo/diretório Laravel encontrado!" >&2
            return 1
        fi
        return
    fi

    # Processamento normal de arquivos
    if (( $# == 0 )); then
        echo "Uso: f2j <padrão1> <padrão2> ..."
        echo "Ex: f2j *.sh docker/*.conf"
        echo "Ex (Laravel): f2j laravel"
        return 1
    fi

    local json_output=() temp_file=$(mktemp)

    for pattern in "$@"; do
        for file in $pattern; do  # Removido $~ para segurança
            [[ -f "$file" ]] || continue

            if grep -Iq . "$file" 2>/dev/null; then
                if content=$(jq -Rs --arg path "$file" \
                    '{path: $path, content: .}' < "$file" 2>/dev/null); then
                    json_output+=("$content")
                else
                    echo "Erro ao processar: $file" >&2
                fi
            else
                echo "Ignorando binário: $file" >&2
            fi
        done
    done

    if (( ${#json_output[@]} > 0 )); then
        printf '%s\n' "${json_output[@]}" | jq -s '.' > "$temp_file"
        xclip -sel c < "$temp_file"
        echo -e "\n🔖 Arquivos processados:"
        jq -r '.[].path' "$temp_file"
        echo "✅ ${#json_output[@]} arquivo(s) convertidos!"
    else
        echo "Nenhum arquivo válido encontrado." >&2
        return 1
    fi

    rm -f "$temp_file"
}

function json() {
    f2j "$@"
}
